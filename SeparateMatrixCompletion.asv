function rec_img = SeparateMatrixCompletion(sampled_image, mask, opts)



%note: this docstring has been generated by a LLM. The rest of the code was
%written by ourselves.




%image reconstruction via individual matrix completion
%implementation of SVT algorithm by Cai, Candes and Shen.
%                https://arxiv.org/pdf/0810.3286
%
%   INPUTS:
%       sampled_image : M×N×C numeric array
%           The observed image with missing entries. Typically, unobserved
%           pixels are set to zero.
%
%       mask : M×N logical or numeric array
%           Binary sampling mask indicating observed entries. mask(i,j) = 1
%           if the pixel (i,j) is known, and 0 otherwise.
%
%       opts : 1×6 numeric vector containing algorithm parameters:
%           opts(1) = delta   : Step size parameter (affects convergence speed)
%           opts(2) = eps     : Convergence tolerance (relative error threshold)
%           opts(3) = tau     : Singular value shrinkage threshold
%           opts(4) = ℓ       : (Currently unused; kept for compatibility)
%           opts(5) = kmax    : Maximum number of iterations
%           opts(6) = k0      : Initialization scaling parameter
%
%   OUTPUT:
%       rec_img : M×N×C numeric array
%           The reconstructed image with missing entries filled in based on
%           low-rank matrix completion of each channel.
%
%   DESCRIPTION:
%       The SVT algorithm iteratively updates an auxiliary matrix Y and
%       performs soft-thresholding on its singular values to obtain a low-rank
%       estimate X. The update rule is given by:
%
%           Y_{k+1} = Y_k + δ * P_Ω(M - X_k)
%           X_k = U * S_τ(Σ) * V'
%
%       where S_τ(Σ) = diag(max(σ_i - τ, 0)) is the singular value
%       soft-thresholding operator, and P_Ω projects onto observed entries.
%
%   NOTES:
%       • Each color channel is processed independently using a parfor loop.
%       • The relative error on observed entries is used as a stopping
%         criterion.
%       • The function assumes the missing entries are zero in sampled_image.
%
%   See also: SVD, PARFOR






shape = size(sampled_image);
imsize = [shape(1) shape(2)];
channels = shape(3);
numPixels = prod(imsize);

delta = opts(1);
eps = opts(2);
tau = opts(3);
l = opts(4);
kmax = opts(5);
k0 = opts(6);




%initializations
X = zeros(shape); 
sampled_image_norm = pagenorm(sampled_image, 'fro');
rel_error = zeros(kmax, channels);l

%loop over separate channels
for c = 1:channels
Y = k0 * delta * sampled_image(:,:,c);
    

%SVT iterations
    for k = 1:kmax
       [U,S,V] = svd(Y);   %do the SVD
        S = max(S-tau, 0);  %threshold
        X(:,:,c) = U*S*V';   %construct low rank approximation
    
        rel_error() = norm(mask.*(X(:,:,c)-sampled_image(:,:,c)), 'fro') / sampled_image_norm(:,:,c);   %print error per channel


        if rel_error(k, c) < eps
            break
        end

        %gradient step
        Y = Y + delta * mask.* (sampled_image(:,:,c) - X(:,:,c));
    
    end
end

%return image
rec_img = X;
end